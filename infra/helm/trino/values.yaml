# Default values for trino.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: trinodb/trino
  pullPolicy: Always
  # Overrides the image tag whose default is the chart version.
  # Same value as Chart.yaml#appVersion
  tag: "438"

imagePullSecrets:
  - name: registry-credentials

server:
  workers: 3
  node:
    environment: production
    dataDir: /data/trino
    pluginDir: /usr/lib/trino/plugin
  log:
    trino:
      level: INFO
  config:
    path: /etc/trino
    http:
      port: 8080
    https:
      enabled: false
      port: 8443
      keystore:
        path: ""
    # Trino supports multiple authentication types: PASSWORD, CERTIFICATE, OAUTH2, JWT, KERBEROS
    # For more info: https://trino.io/docs/current/security/authentication-types.html
    authenticationType: "PASSWORD"
    query:
      maxMemory: "4GB"
  exchangeManager:
    name: "filesystem"
    baseDir: "/tmp/trino-local-file-system-exchange-manager"
  workerExtraConfig: ""
  coordinatorExtraConfig: |-
    http-server.authentication.allow-insecure-over-http=true
    http-server.process-forwarded=true
    web-ui.enabled=true
    web-ui.authentication.type=FORM
  autoscaling:
    enabled: false
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
  internalSharedSecret: ""

accessControl:
  type: configmap
  refreshPeriod: 60s
  # # Rules file is mounted to /etc/trino/access-control
  configFile: "rules.json"
  rules:
    rules.json: |-
      {
        "catalogs": [
          {
            "group": "admin",
            "catalog": ".*",
            "allow": "all"
          },
          {
            "group": "giga-superset",
            "catalog": "system",
            "allow": "read-only"
          },
          {
            "group": "giga-trino|giga-superset|giga-ingestion-portal",
            "catalog": "delta_lake",
            "allow": "read-only"
          }
        ],
        "schemas": [
          {
            "group": "admin",
            "catalog": ".*",
            "schema": ".*",
            "owner": true
          },
          {
            "group": "giga-trino|giga-superset|giga-ingestion-portal",
            "catalog": "delta_lake",
            "schema": ".*",
            "owner": "false"
          },
          {
            "group": "giga-superset",
            "catalog": "delta_lake",
            "schema": "superset",
            "owner": true
          },
          {
            "group": "giga-superset",
            "catalog": "system",
            "schema": ".*"
          }
        ],
        "tables": [
          {
            "group": "admin",
            "catalog": ".*",
            "schema": ".*",
            "table": ".*",
            "privileges": ["SELECT", "OWNERSHIP", "GRANT_SELECT"]
          },
          {
            "group": "giga-superset",
            "catalog": "delta_lake",
            "schema": "superset",
            "table": ".*",
            "privileges": [
              "SELECT",
              "INSERT",
              "DELETE",
              "UPDATE",
              "OWNERSHIP",
              "GRANT_SELECT"
            ]
          },
          {
            "group": "giga-superset",
            "catalog": "system",
            "schema": "metadata",
            "table": ".*",
            "privileges": ["SELECT"]
          },
          {
            "group": "giga-superset|giga-trino|giga-ingestion-portal",
            "catalog": "delta_lake",
            "schema": ".*",
            "table": ".*",
            "privileges": ["SELECT", "GRANT_SELECT"]
          }
        ],
        "functions": [
          {
            "group": "admin",
            "catalog": ".*",
            "schema": ".*",
            "function": ".*",
            "privileges": ["EXECUTE", "GRANT_EXECUTE", "OWNERSHIP"]
          },
          {
            "group": "giga-superset|giga-trino|giga-ingestion-portal",
            "catalog": "delta_lake",
            "schema": ".*",
            "function": ".*",
            "privileges": ["EXECUTE", "GRANT_EXECUTE"]
          },
          {
            "group": "giga-superset",
            "catalog": "system",
            "schema": "metadata",
            "function": ".*",
            "privileges": ["EXECUTE"]
          }
        ],
        "procedures": [
          {
            "group": "admin",
            "catalog": ".*",
            "schema": ".*",
            "procedure": ".*",
            "privileges": ["EXECUTE", "GRANT_EXECUTE"]
          },
          {
            "group": "giga-superset",
            "catalog": "delta_lake",
            "schema": "superset",
            "procedure": ".*",
            "privileges": ["EXECUTE", "GRANT_EXECUTE"]
          },
          {
            "group": "giga-superset",
            "catalog": "system",
            "schema": "metadata",
            "procedure": ".*",
            "privileges": ["EXECUTE"]
          }
        ],
        "queries": [
          {
            "group": "admin",
            "allow": ["execute", "kill", "view"]
          },
          {
            "group": "giga-superset|giga-trino|giga-ingestion-portal",
            "allow": ["execute", "view"]
          }
        ]
      }

additionalNodeProperties: { }

additionalConfigProperties: { }

additionalLogProperties: { }

additionalExchangeManagerProperties: { }

eventListenerProperties: { }

additionalCatalogs:
  delta_lake: ""
  pg_dev_oia_prjrazordb: ""
  gigamaps_production_db: ""
  gigameter_production_db: ""


# Array of EnvVar (https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envvar-v1-core)
env: [ ]

# Array of EnvFromSource (https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envfromsource-v1-core)
envFrom:
  - secretRef:
      name: ""
#  - configMapRef:
#      name: giga-trino-configmap

initContainers: { }
# coordinator:
#   - name: init-coordinator
#     image: busybox:1.28
#     imagePullPolicy: IfNotPresent
#     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
# worker:
#   - name: init-worker
#     image: busybox:1.28
#     command: ['sh', '-c', 'echo The worker is running! && sleep 3600']

sidecarContainers: { }
#   coordinator:
#     - name: side-coordinator
#       image: busybox:1.28
#       imagePullPolicy: IfNotPresent
#       command: ['sleep', '1']
#   worker:
#     - name: side-worker
#       image: busybox:1.28
#       imagePullPolicy: IfNotPresent
#       command: ['sleep', '1']

securityContext:
  runAsUser: 1000
  runAsGroup: 1000

shareProcessNamespace:
  coordinator: false
  worker: false

service:
  type: ClusterIP
  port: 8080

auth:
  # Set username and password
  # https://trino.io/docs/current/security/password-file.html#file-format
  # passwordAuth: "username:encrypted-password-with-htpasswd"
  # or set the name of a secret containing this file in the password.db key
  passwordAuthSecret: ""
  # Set users' groups
  # https://trino.io/docs/current/security/group-file.html#file-format
  refreshPeriod: 60s
  groups: ""


serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Annotations to add to the service account
  annotations: { }

secretMounts: [ ]
# - name: sample-secret
#   secretName: sample-secret
#   path: /secrets/sample.json

coordinator:
  jvm:
    maxHeapSize: "8G"
    gcMethod:
      type: "UseG1GC"
      g1:
        heapRegionSize: "32M"

  config:
    memory:
      heapHeadroomPerNode: ""
    query:
      maxMemoryPerNode: "1GB"

  additionalJVMConfig: { }

  additionalExposedPorts: { }

  resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  livenessProbe: { }
  # initialDelaySeconds: 20
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 6
  # successThreshold: 1
  readinessProbe: { }
  # initialDelaySeconds: 20
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 6
  # successThreshold: 1

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  additionalConfigFiles: { }

  annotations: { }

  labels: { }

  secretMounts: [ ]
  # - name: sample-secret
  #   secretName: sample-secret
  #   path: /secrets/sample.json

worker:
  jvm:
    maxHeapSize: "8G"
    gcMethod:
      type: "UseG1GC"
      g1:
        heapRegionSize: "32M"

  config:
    memory:
      heapHeadroomPerNode: ""
    query:
      maxMemoryPerNode: "1GB"

  additionalJVMConfig: { }

  additionalExposedPorts: { }

  resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  livenessProbe: { }
  # initialDelaySeconds: 20
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 6
  # successThreshold: 1
  readinessProbe: { }
  # initialDelaySeconds: 20
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 6
  # successThreshold: 1

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  additionalConfigFiles: { }

  annotations: { }

  labels: { }

  secretMounts: [ ]
  # - name: sample-secret
  #   secretName: sample-secret
  #   path: /secrets/sample.json

kafka:
  mountPath: "/etc/trino/schemas"
  tableDescriptions: { }
  # Custom kafka table descriptions that will be mounted in mountPath
  # testschema.json: |-
  #   {
  #     "tableName": "testtable",
  #     "schemaName": "testschema",
  #     "topicName": "testtopic",
  #     "key": {
  #       "dataFormat": "json",
  #       "fields": [
  #         {
  #           "name": "_key",
  #           "dataFormat": "VARCHAR",
  #           "type": "VARCHAR",
  #           "hidden": "false"
  #         }
  #       ]
  #     },
  #     "message": {
  #       "dataFormat": "json",
  #       "fields": [
  #         {
  #           "name": "id",
  #           "mapping": "id",
  #           "type": "BIGINT"
  #         },
  #         {
  #           "name": "test_field",
  #           "mapping": "test_field",
  #           "type": "VARCHAR"
  #         }
  #       ]
  #     }
  #   }
commonLabels: { }  # Labels that get applied to every resource's metadata
ingress:
  enabled: false
  className: ""
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/appgw-ssl-certificate: "kv-cert-unitst"
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: ""
      paths:
        - path: /
          pathType: Prefix
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
